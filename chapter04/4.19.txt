Exercise 4.19: Given that ptr points to an int, that vec is a vector<int>, and
that ival is an int, explain the behavior of each of these expressions. Which,
if any, are likely to be incorrect? Why? How might each be corrected?

	(a) ptr != 0 && *ptr++
	(b) ival++ && ival
	(c) vec[ival++] <= vec[ival]

By Faisal Saadatmand

(a) p must be a valid pointer, i.e. NOT a null pointer, AND the value p points
	to must not be a terminating character, i.e. not '\0'. Increment ptr after
	evaluating *ptr.

(b) ival (copy) must not be 0--increment ival--AND that ival (i.e.: ival + 1)
	is not 0.

(c) vec at index ival (copy) must be less or equal to to vec at index ival + 1
	(possibility incremented). Incorrect: the increment operator must not be
	used with ival because it appears in both operands. The order of evaluation
	is not guaranteed (p. 137), and therefore, changing the state of ival in
	the middle of the expression would lead to undefined behaviour.

	correction:
		vec[ival] <= vec[ival + 1]
