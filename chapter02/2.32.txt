Exercise 2.32: Is the following code legal or not? If not, how might you make
it legal?

	int null = 0, *p = null;

By Faisal Saadatmand

Illegal: Though initialized with a literal, i.e. a constant expression, null is
		a plain int variable; thus, it is a nonconstant expression. p is a
		pointer to an int. Therefore, it is a nonconstant expression and can
		only be initialized using the address operator.

Correct syntax:
	const int null = 0;
	const int *p = & null;
or
	const int null = 0, *p = &null;
or
	constexpr int null = 0;
	const int *p = &null;

Here, null is a constant expression and p is a pointer to a constant int.  Now,
p can be initialized with a constant expression.

Notes: 
(1) we cannot use the following syntax because null is not a "literal type",
	i.e. it is not a simple literal:

	constexpr int null = 0;
	const int *p = null;            // invalid: & operator must be used

(2) You can allows use the standard library defined literal nullptr or C NULL
	(include cstdlib):

	int *p = nullptr;
	or
	int *p = NULL;

(3) This declaration and definition of p would work too, but it is nonconstant:
	int null = 0, *p = &null;
