/*
 * Exercise 15.29: Repeat your program, but this time store shared_ptrs to
 * objects of type Quote. Explain any discrepancy in the sum generated by the
 * this version and the previous program. If there is no discrepancy, explain
 * why there isn't one.
 *
 * By Faisal Saadatmand
 *
 * Answer: when we store a Bulk_quote in a container with elements of tyep Quote, the elements are 
 * copied or moved using the constructor with the corrosponding parameter type. 
 * Since it is
 * an object, which constructor to call is determined by the static type of the
 * object, which in this case is Quote. This will result in "slicing-down"
 * bulk_quote.
 *
 */

#include <algorithm>
#include <iostream>
#include <memory>
#include <vector>
#include "15.27.h" // Quote

int main()
{
	std::vector<std::shared_ptr<Quote>> basket;
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("1-111-11111-1", 15.99, 1, 0.15));
	basket.push_back(std::make_shared<Bulk_quote>("3-333-33333-3", 19.99, 4, 0.25));
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("4-444-44444-4", 51.50, 20, 0.25));
	basket.push_back(std::make_shared<Bulk_quote>("1-111-11111-1", 15.99, 1, 0.15));
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("1-111-11111-1", 15.99, 1, 0.15));
	basket.push_back(std::make_shared<Bulk_quote>("3-333-33333-3", 19.99, 4, 0.25));
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));

	sort(basket.begin(), basket.end(),
		[](const std::shared_ptr<Quote> &lhs, const std::shared_ptr<Quote> &rhs)
		{ return lhs->isbn() < rhs->isbn(); });
	std::size_t n = 0, total = 0;
	for (auto it = basket.cbegin(); it != basket.cend(); it += n) {
		n = count_if(basket.cbegin(), basket.cend(),
				[&](const std::shared_ptr<Quote> &item)
				{ return item->isbn() == (*it)->isbn(); }); 
		total += print_total(std::cout, **it, n);
	}
	std::cout << "\t\t\t\t  Total: " << total << '\n';
	return 0;
}
