/*
 * Exercise 15.29: Repeat your program, but this time store shared_ptrs to
 * objects of type Quote. Explain any discrepancy in the sum generated by the
 * this version and the previous program. If there is no discrepancy, explain
 * why there isn't one.
 *
 * By Faisal Saadatmand
 *
 * Answer: in the previous exercise we store a Bulk_quote in a container with
 * elements of type Quote, and therefore, the elements were copied or moved
 * using the Quote constructor. This is so because when pushing (i.e copying or
 * moving) a Bulk_quote object into a container, the compiler uses the static
 * type of the object to determine which constructor to call. In that case it
 * was the Quote constructor, which resulted in the "slicing-down" of the
 * object.
 *
 * In this exercise, on the other hand, we stored pointers to Quote into the
 * vector instead of Quote objects. Coping or moving those pointers into the
 * vector is managed by the shared_pointer's constructor, which supports
 * derived-to-base conversion. When we need to use the data in the vector, we
 * dereference the pointers and make an indirect virtual call to net_price
 * (through print_total). This results in using the dynamic type of the object
 * to determine which net_price to execute, and we get the expected output.
 *
 */

#include <algorithm>
#include <iostream>
#include <memory>
#include <vector>
#include "15.27.h" // Quote

int main()
{
	std::vector<std::shared_ptr<Quote>> basket;
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("1-111-11111-1", 15.99, 1, 0.15));
	basket.push_back(std::make_shared<Bulk_quote>("3-333-33333-3", 19.99, 4, 0.25));
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("4-444-44444-4", 51.50, 20, 0.25));
	basket.push_back(std::make_shared<Bulk_quote>("1-111-11111-1", 15.99, 1, 0.15));
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("1-111-11111-1", 15.99, 1, 0.15));
	basket.push_back(std::make_shared<Bulk_quote>("3-333-33333-3", 19.99, 4, 0.25));
	basket.push_back(std::make_shared<Bulk_quote>("2-222-22222-2", 23.45, 2, 0.5));
	basket.push_back(std::make_shared<Bulk_quote>("9-999-99999-9", 23.45, 2, 0.5));

	sort(basket.begin(), basket.end(),
		[](const std::shared_ptr<Quote> &lhs, const std::shared_ptr<Quote> &rhs)
		{ return lhs->isbn() < rhs->isbn(); });
	std::size_t n = 0, total = 0;
	for (auto it = basket.cbegin(); it != basket.cend(); it += n) {
		// cout_if will return 1 if the predicate failed
		n = count_if(basket.cbegin(), basket.cend(),
				[&](const std::shared_ptr<Quote> &item)
				{ return item->isbn() == (*it)->isbn(); }); 
		total += print_total(std::cout, **it, n);
	}
	std::cout << "\t\t\t\t  Total: " << total << '\n';
	return 0;
}
