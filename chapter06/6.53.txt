Exercise 6.53: Explain the effect of the second declaration in each one of the
following sets of declarations. Indicate which, if any, are illegal.

	(a) int calc(int&, int&);
		int calc(const int&, const int&);
	(b) int calc(char*, char*);
		int calc(const char*, const char*);
	(c) int calc(char*, char*);
		int calc(char* const, char* const);

By Faisal Saadatmand

(a) a new function that takes a const in& for both parameters. The compiler will
	use the 'constness' of the argument in the call to these functions to determine
	the best match. If both arguments are non-constant references then cal(int&,
	int) will be called, on the other hand, if the arguments are constant
	references than calc(const int&, const int&) will be called. If one argument is
	a const and the other is non-constant int &, the compiler will return an error,
	because the call is ambiguous.
(b) same as a in regards to matching through const conversion, but parameters'
	type is a pointer to character.
(c) Illegal: here, the parameters' type in the first declaration is pointer to
	a char, while in the second it is const pointer to a char, which is a top-level
	const. A top-level constant is discarded, and thus, we end up with the same
	definition: a function that takes pointer to char and returns an int.
