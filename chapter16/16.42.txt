Exercise 16.42: Determine the type of T and of val in each of the following calls:

	template <typename T> void g(T&& val);
	int i = 0; const int ci = i;
	(a) g(i); (b) g(ci); (c) g(i * ci);

By Faisal Saadatmand

Rules for type deduction from rvalue reference function parameter.

	1) When passing a lvalue to a function parameter that is a rvalue
		reference, the compiler deduces the template type parameter as the
		argument's lvalue reference type, i.e. T& (not T).

	2) reference collapsing:

		T& &, T& && and T&& & all collapses to T&
		T&& && collapses to T&&

 Refer to pages 687-688 for more details.

(a) i is an lvalue; therefore, val is int & and T is deduced as int &. 
	int & && collapses to int &

(b) ci is an lvalue; therefore, val is const int & and T is deduced as const int &.
	const int & && collapses into const int &

(c) i * ci yields an rvalue (top-level const is dropped after the
	evaluation); therefore, val is int && and T is deduced as int &&.
	int && && collapses into int &&
