Exercise 12.17: Which of the following unique_ptr declarations are illegal or
likely to result in subsequent program error? Explain what the problem is with
each one.

	int ix = 1024, *pi = &ix, *pi2 = new int(2048);
	typedef unique_ptr<int> IntP;
	(a) IntP p0(ix);
	(b) IntP p1(pi);
	(c) IntP p2(pi2);
	(d) IntP p3(&ix);
	(e) IntP p4(new int(2048));
	(f) IntP p5(p2.get());

By Faisal Saadatmand

(a) Illegal, ix is not a pointer. It should be &ix.
(b) Legal; however, it causes a program error, because a unique_ptr is
	initialized from an object on the stack.
(c) Legal; however, if delete is called on pi2, p2 will become invalid.
(d) Legal; however, it causes a program error, because a unique_ptr is
	initialized from an object on the stack.
(e) Legal
(f) Legal; however, it causes a program error, because two unique pointers are
	pointing at the same object. When one goes out of scope the other will
	become invalid--potential of double delete.
